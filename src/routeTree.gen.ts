/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

import { Route as rootRouteImport } from './routes/__root'
import { Route as ZipRouteImport } from './routes/zip'
import { Route as NotFoundRouteImport } from './routes/not-found'
import { Route as LoginRouteImport } from './routes/login'
import { Route as LayoutRouteImport } from './routes/_layout'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as LayoutIndexRouteImport } from './routes/_layout/index'
import { Route as LayoutNavigationBlockingRouteImport } from './routes/_layout/navigation-blocking'
import { Route as LayoutMusicRouteImport } from './routes/_layout/music'
import { Route as AuthenticatedSettingsRouteImport } from './routes/_authenticated/settings'
import { Route as AuthenticatedProfileRouteImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedPostsRouteImport } from './routes/_authenticated/posts'
import { Route as AuthenticatedErrorTestRouteImport } from './routes/_authenticated/error-test'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedAboutRouteImport } from './routes/_authenticated/about'
import { Route as AuthenticatedPostsIndexRouteImport } from './routes/_authenticated/posts/index'
import { Route as AuthenticatedPostsPostIdRouteImport } from './routes/_authenticated/posts/$postId'

const PLazyRouteImport = createFileRoute('/p')()

const PLazyRoute = PLazyRouteImport.update({
  id: '/p',
  path: '/p',
  getParentRoute: () => rootRouteImport,
} as any).lazy(() => import('./routes/p.lazy').then((d) => d.Route))
const ZipRoute = ZipRouteImport.update({
  id: '/zip',
  path: '/zip',
  getParentRoute: () => rootRouteImport,
} as any)
const NotFoundRoute = NotFoundRouteImport.update({
  id: '/not-found',
  path: '/not-found',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutRoute = LayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const LayoutIndexRoute = LayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)
const LayoutNavigationBlockingRoute =
  LayoutNavigationBlockingRouteImport.update({
    id: '/navigation-blocking',
    path: '/navigation-blocking',
    getParentRoute: () => LayoutRoute,
  } as any)
const LayoutMusicRoute = LayoutMusicRouteImport.update({
  id: '/music',
  path: '/music',
  getParentRoute: () => LayoutRoute,
} as any)
const AuthenticatedSettingsRoute = AuthenticatedSettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedProfileRoute = AuthenticatedProfileRouteImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPostsRoute = AuthenticatedPostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedErrorTestRoute = AuthenticatedErrorTestRouteImport.update({
  id: '/error-test',
  path: '/error-test',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAboutRoute = AuthenticatedAboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedPostsIndexRoute = AuthenticatedPostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedPostsRoute,
} as any)
const AuthenticatedPostsPostIdRoute =
  AuthenticatedPostsPostIdRouteImport.update({
    id: '/$postId',
    path: '/$postId',
    getParentRoute: () => AuthenticatedPostsRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/zip': typeof ZipRoute
  '/p': typeof PLazyRoute
  '/about': typeof AuthenticatedAboutRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/error-test': typeof AuthenticatedErrorTestRoute
  '/posts': typeof AuthenticatedPostsRouteWithChildren
  '/profile': typeof AuthenticatedProfileRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/music': typeof LayoutMusicRoute
  '/navigation-blocking': typeof LayoutNavigationBlockingRoute
  '/': typeof LayoutIndexRoute
  '/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/posts/': typeof AuthenticatedPostsIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/zip': typeof ZipRoute
  '/p': typeof PLazyRoute
  '/about': typeof AuthenticatedAboutRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/error-test': typeof AuthenticatedErrorTestRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/settings': typeof AuthenticatedSettingsRoute
  '/music': typeof LayoutMusicRoute
  '/navigation-blocking': typeof LayoutNavigationBlockingRoute
  '/': typeof LayoutIndexRoute
  '/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/posts': typeof AuthenticatedPostsIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/_layout': typeof LayoutRouteWithChildren
  '/login': typeof LoginRoute
  '/not-found': typeof NotFoundRoute
  '/zip': typeof ZipRoute
  '/p': typeof PLazyRoute
  '/_authenticated/about': typeof AuthenticatedAboutRoute
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/_authenticated/error-test': typeof AuthenticatedErrorTestRoute
  '/_authenticated/posts': typeof AuthenticatedPostsRouteWithChildren
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/settings': typeof AuthenticatedSettingsRoute
  '/_layout/music': typeof LayoutMusicRoute
  '/_layout/navigation-blocking': typeof LayoutNavigationBlockingRoute
  '/_layout/': typeof LayoutIndexRoute
  '/_authenticated/posts/$postId': typeof AuthenticatedPostsPostIdRoute
  '/_authenticated/posts/': typeof AuthenticatedPostsIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/not-found'
    | '/zip'
    | '/p'
    | '/about'
    | '/dashboard'
    | '/error-test'
    | '/posts'
    | '/profile'
    | '/settings'
    | '/music'
    | '/navigation-blocking'
    | '/'
    | '/posts/$postId'
    | '/posts/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/not-found'
    | '/zip'
    | '/p'
    | '/about'
    | '/dashboard'
    | '/error-test'
    | '/profile'
    | '/settings'
    | '/music'
    | '/navigation-blocking'
    | '/'
    | '/posts/$postId'
    | '/posts'
  id:
    | '__root__'
    | '/_authenticated'
    | '/_layout'
    | '/login'
    | '/not-found'
    | '/zip'
    | '/p'
    | '/_authenticated/about'
    | '/_authenticated/dashboard'
    | '/_authenticated/error-test'
    | '/_authenticated/posts'
    | '/_authenticated/profile'
    | '/_authenticated/settings'
    | '/_layout/music'
    | '/_layout/navigation-blocking'
    | '/_layout/'
    | '/_authenticated/posts/$postId'
    | '/_authenticated/posts/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LayoutRoute: typeof LayoutRouteWithChildren
  LoginRoute: typeof LoginRoute
  NotFoundRoute: typeof NotFoundRoute
  ZipRoute: typeof ZipRoute
  PLazyRoute: typeof PLazyRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/p': {
      id: '/p'
      path: '/p'
      fullPath: '/p'
      preLoaderRoute: typeof PLazyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/zip': {
      id: '/zip'
      path: '/zip'
      fullPath: '/zip'
      preLoaderRoute: typeof ZipRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/not-found': {
      id: '/not-found'
      path: '/not-found'
      fullPath: '/not-found'
      preLoaderRoute: typeof NotFoundRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/navigation-blocking': {
      id: '/_layout/navigation-blocking'
      path: '/navigation-blocking'
      fullPath: '/navigation-blocking'
      preLoaderRoute: typeof LayoutNavigationBlockingRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_layout/music': {
      id: '/_layout/music'
      path: '/music'
      fullPath: '/music'
      preLoaderRoute: typeof LayoutMusicRouteImport
      parentRoute: typeof LayoutRoute
    }
    '/_authenticated/settings': {
      id: '/_authenticated/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof AuthenticatedSettingsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/posts': {
      id: '/_authenticated/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof AuthenticatedPostsRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/error-test': {
      id: '/_authenticated/error-test'
      path: '/error-test'
      fullPath: '/error-test'
      preLoaderRoute: typeof AuthenticatedErrorTestRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/about': {
      id: '/_authenticated/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AuthenticatedAboutRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/posts/': {
      id: '/_authenticated/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof AuthenticatedPostsIndexRouteImport
      parentRoute: typeof AuthenticatedPostsRoute
    }
    '/_authenticated/posts/$postId': {
      id: '/_authenticated/posts/$postId'
      path: '/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof AuthenticatedPostsPostIdRouteImport
      parentRoute: typeof AuthenticatedPostsRoute
    }
  }
}

interface AuthenticatedPostsRouteChildren {
  AuthenticatedPostsPostIdRoute: typeof AuthenticatedPostsPostIdRoute
  AuthenticatedPostsIndexRoute: typeof AuthenticatedPostsIndexRoute
}

const AuthenticatedPostsRouteChildren: AuthenticatedPostsRouteChildren = {
  AuthenticatedPostsPostIdRoute: AuthenticatedPostsPostIdRoute,
  AuthenticatedPostsIndexRoute: AuthenticatedPostsIndexRoute,
}

const AuthenticatedPostsRouteWithChildren =
  AuthenticatedPostsRoute._addFileChildren(AuthenticatedPostsRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAboutRoute: typeof AuthenticatedAboutRoute
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedErrorTestRoute: typeof AuthenticatedErrorTestRoute
  AuthenticatedPostsRoute: typeof AuthenticatedPostsRouteWithChildren
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedSettingsRoute: typeof AuthenticatedSettingsRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAboutRoute: AuthenticatedAboutRoute,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedErrorTestRoute: AuthenticatedErrorTestRoute,
  AuthenticatedPostsRoute: AuthenticatedPostsRouteWithChildren,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedSettingsRoute: AuthenticatedSettingsRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

interface LayoutRouteChildren {
  LayoutMusicRoute: typeof LayoutMusicRoute
  LayoutNavigationBlockingRoute: typeof LayoutNavigationBlockingRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutMusicRoute: LayoutMusicRoute,
  LayoutNavigationBlockingRoute: LayoutNavigationBlockingRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LayoutRoute: LayoutRouteWithChildren,
  LoginRoute: LoginRoute,
  NotFoundRoute: NotFoundRoute,
  ZipRoute: ZipRoute,
  PLazyRoute: PLazyRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
